setwd("C:/Users/Kun/Desktop/340/R/Assignment 9/Accident")
cat("Current directory is", getwd(), "\n")
# load required libraries
library(plyr)
library(reshape2)
library(ggplot2)
# read in the data
radf <- read.csv("road-accidents-2010.csv", as.is=TRUE, strip.white=TRUE,
header=TRUE, fill=TRUE)
# remove the missing value (NA)
radf[radf==-1] <- NA
radf <- radf[!is.na(radf$Number_of_Vehicles),]
radf <- radf[!is.na(radf$Number_of_Casualties),]
radf <- radf[!is.na(radf$Accident_Severity),]
# create the variable AccidentIndex
radf <- transform(radf, AccidentIndex=Number_of_Vehicles*Number_of_Casualties/Accident_Severity)
# print the first 10 records after fixedup
radf[1:10,]
#-----------------------set the function---------------------------------
# Select a random sample of size 10 from the accident data frame
my.sample <- sample(1:nrow(radf), size=10, replace=FALSE)
my.sample
# function containing the sample size, the mean and the 90th percentile
# of a sample of the accident index values
AI.stat <- function(radf, sample.size){
my.sample <- sample(1:nrow(radf), size=sample.size, replace=FALSE)
sampled.acc.index <- radf$AccidentIndex [my.sample]
mean <- mean(sampled.acc.index)
per90 <- quantile(sampled.acc.index, .90)
res<- c(sample.size, mean, per90)
names(res) <- c("sample.size", "mean","per90")
return(res)
}
# Check the function
AI.stat(radf, 10)
AI.stat(radf, 10)
AI.stat(radf,100)
AI.stat(radf,100)
# repeatedly apply the function
my.result <- rdply(5, AI.stat(radf=radf, sample.size=10), .id="rep")
my.result
#-----------------------SE of the statistics-----------------------------------
# Create a new function that compute the sd of the mean and per90 values
AI.sim <- function (sample.size, radf, nsamples=1000){
# After all samples are generated, compute the sd of the mean and per90 values
my.result <- rdply(nsamples, AI.stat(radf=radf, sample.size=sample.size), .id="rep")
se.mean <- sd(my.result$mean)
se.per90 <- sd(my.result$per90)
res<- c(sample.size, se.mean, se.per90)
names(res) <- c("sample.size","se.mean","se.per90")
return(res)
}
# check the new function
AI.sim(sample.size=20, radf=radf, nsamples=100)
AI.sim(sample.size=20, radf=radf, nsamples=100)
AI.sim(sample.size=200, radf=radf, nsamples=100)
AI.sim(sample.size=2000, radf=radf, nsamples=100)
# call the AI.sim() function with sample sizes 100,200,400,1000,2000 and 4000
my.result <- ldply(c(100,200,400,1000,2000,4000), AI.sim, radf=radf, nsamples=1000)
my.result
#------------------check the slopes-----------------------------------
# check if the log(se) of statistics decline as log(n)
# Create derived variables for the log(sample size), log(se p90), and log(se mean).
my.result$log.sample.size = log(my.result$sample.size)
my.result$log.se.mean = log(my.result$se.mean)
my.result$log.se.per90 = log(my.result$se.per90)
my.result
# Fit a line to the relationship between the log(sample size) and the log(se) for the two statistics.
lm.mean <- lm(log.sample.size ~ log.se.mean, data=my.result)
coef(lm.mean)
confint(lm.mean, 'log.se.mean', level=0.95)
lm.per90 <- lm(log.sample.size ~log.se.per90, data=my.result)
coef(lm.per90)
confint(lm.per90, 'log.se.per90', level=0.95)
#--------------------make plot-----------------------------------------------
# converts from wide-format to long-format
my.result2 <-melt(my.result[1:3], id="sample.size")
my.result2
lm.final <- lm(log(value) ~log(sample.size), data=my.result2, group=variable)
#--------------------make plot-----------------------------------------------
# converts from wide-format to long-format
my.result2 <-melt(my.result[1:3], id="sample.size")
my.result2
lm.final <- lm(log(value) ~log(sample.size), data=my.result2, group=variable)
lm.final <- lm(log(value) ~log(sample.size), data=subset(my.result2,variable=="se.mean"))
lm.final
lm.final <- lm(log(value) ~log(sample.size), data=subset(my.result2,variable=="se.mean"))
lm.final <- lm(log(value) ~log(sample.size), data=subset(my.result2,variable=="se.per90"))
lm.final
lm.final1 <- lm(log(value) ~log(sample.size), data=subset(my.result2,variable=="se.mean"))
lm.final2 <- lm(log(value) ~log(sample.size), data=subset(my.result2,variable=="se.per90"))
lm.final2
my.result
lm.final1 <- lm(log(se.mean) ~log(sample.size), data=my.result)
lm.final2 <- lm(log(se.per90) ~log(sample.size), data=my.result)
lm.final1
lm.final2
lm.final1 <- lm(log(value) ~log(sample.size), data=my.result2)
lm.final1
lm.final1 <- lm(log(se.mean) ~log(sample.size), data=my.result)
lm.final2 <- lm(log(se.per90) ~log(sample.size), data=my.result)
lm.final1
lm.final2
# Fit a line to the relationship between the log(sample size) and the log(se) for the two statistics.
lm.mean <- lm(log.sample.size ~ log.se.mean, data=my.result)
coef(lm.mean)
confint(lm.mean, 'log.se.mean', level=0.95)
lm.per90 <- lm(log.sample.size ~log.se.per90, data=my.result)
coef(lm.per90)
confint(lm.per90, 'log.se.per90', level=0.95)
# Fit a line to the relationship between the log(sample size) and the log(se) for the two statistics.
lm.mean <- lm(log.se.mean ~ log.sample.size, data=my.result)
coef(lm.mean)
confint(lm.mean, 'log.se.mean', level=0.95)
lm.per90 <- lm(log.se.per90 ~ log.sample.size , data=my.result)
coef(lm.per90)
confint(lm.per90, 'log.se.per90', level=0.95)
# Fit a line to the relationship between the log(sample size) and the log(se) for the two statistics.
lm.mean <- lm(log.se.mean ~ log.sample.size, data=my.result)
coef(lm.mean)
confint(lm.mean, 'log.sample.size', level=0.95)
lm.per90 <- lm(log.se.per90 ~ log.sample.size , data=my.result)
coef(lm.per90)
confint(lm.per90, 'log.sample.size', level=0.95)
#*******************************************************
#
#  Kun, Yang   301178299
#  Stat 340, Spring 2015
#  Assignment 9, Part 2  - Cereal
#
#  Read in the accidents data, Practice how to select the
#  samples. And then check if the log(se) of statistics
#  decline as log(n) with n^(-2)
#
#  Change log:
#    2015-03-16 KY First Edition
#
#*******************************************************
# Assignment 9, Part 2 - Analysis of accidents data
# clear the workspace then set & show the current working directory.
rm(list=ls())
setwd("C:/Users/Kun/Desktop/340/R/Assignment 9/Accident")
cat("Current directory is", getwd(), "\n")
# load required libraries
library(plyr)
library(reshape2)
library(ggplot2)
# read in the data
radf <- read.csv("road-accidents-2010.csv", as.is=TRUE, strip.white=TRUE,
header=TRUE, fill=TRUE)
# remove the missing value (NA)
radf[radf==-1] <- NA
radf <- radf[!is.na(radf$Number_of_Vehicles),]
radf <- radf[!is.na(radf$Number_of_Casualties),]
radf <- radf[!is.na(radf$Accident_Severity),]
# create the variable AccidentIndex
radf <- transform(radf, AccidentIndex=Number_of_Vehicles*Number_of_Casualties/Accident_Severity)
# print the first 10 records after fixedup
radf[1:10,]
#-----------------------set the function---------------------------------
# Select a random sample of size 10 from the accident data frame
my.sample <- sample(1:nrow(radf), size=10, replace=FALSE)
my.sample
# function containing the sample size, the mean and the 90th percentile
# of a sample of the accident index values
AI.stat <- function(radf, sample.size){
my.sample <- sample(1:nrow(radf), size=sample.size, replace=FALSE)
sampled.acc.index <- radf$AccidentIndex [my.sample]
mean <- mean(sampled.acc.index)
per90 <- quantile(sampled.acc.index, .90)
res<- c(sample.size, mean, per90)
names(res) <- c("sample.size", "mean","per90")
return(res)
}
# Check the function
AI.stat(radf, 10)
AI.stat(radf, 10)
AI.stat(radf,100)
AI.stat(radf,100)
# repeatedly apply the function
my.result <- rdply(5, AI.stat(radf=radf, sample.size=10), .id="rep")
my.result
#-----------------------SE of the statistics-----------------------------------
# Create a new function that compute the sd of the mean and per90 values
AI.sim <- function (sample.size, radf, nsamples=1000){
# After all samples are generated, compute the sd of the mean and per90 values
my.result <- rdply(nsamples, AI.stat(radf=radf, sample.size=sample.size), .id="rep")
se.mean <- sd(my.result$mean)
se.per90 <- sd(my.result$per90)
res<- c(sample.size, se.mean, se.per90)
names(res) <- c("sample.size","se.mean","se.per90")
return(res)
}
# check the new function
AI.sim(sample.size=20, radf=radf, nsamples=100)
AI.sim(sample.size=20, radf=radf, nsamples=100)
AI.sim(sample.size=200, radf=radf, nsamples=100)
AI.sim(sample.size=2000, radf=radf, nsamples=100)
# call the AI.sim() function with sample sizes 100,200,400,1000,2000 and 4000
my.result <- ldply(c(100,200,400,1000,2000,4000), AI.sim, radf=radf, nsamples=1000)
my.result
#*******************************************************
#
#  Kun, Yang   301178299
#  Stat 340, Spring 2015
#  Assignment 9, Part 3  - Cigarette Butts and Nests
#
#  Read in the cigarette butts & nest data.Examine
#  if there is the effect of Species and Nest Content
#  on the MEAN number of parasites. Check the errors of
#  the figure 1.
#
#  Change log:
#    2015-03-18 KY First Edition
#
#*******************************************************
# Assignment 09, Part 03 - Analysis of Cigarette Butts in Nests
# clear the workspace then set the current working directory.
rm(list=ls())
setwd("C:/Users/Kun/Desktop/340/R/Assignment 9/nests")
cat("Current directory is", getwd(), "\n")
# load required libraries
library(xlsx)
library(plyr)
library(ggplot2)
library(car)
# read in the data & replace -1 to missing value (NA)
ndf <- read.xlsx('nests.xls', sheetName="Correlational", header=TRUE, stringsAsFactors=FALSE)
ndf[ndf==-1] <- NA
any(ndf==-1, na.rm=TRUE)
# List the first 10 records after fixups
ndf[1:10,]
# examine the effect of Species and Nest Content on the MEAN number of parasites
# check the levels of 2 factors Species & Nest.content
levels(as.factor(ndf$Species))
levels(as.factor(ndf$Nest.content))
# comparing the number of nests measured by host species and nest content
xtabs(~Species+Nest.content, data=ndf)
# compute mean and 95% CI for mean of mites
report <- ddply(ndf, .(Species,Nest.content), summarize,
mean = mean(Number.of.mites, na.rm=TRUE),
lcl  = mean-qt(0.975,length(Number.of.mites)-1)*
sd(Number.of.mites)/sqrt(length(Number.of.mites)),
ucl  = mean+qt(0.975,length(Number.of.mites)-1)*
sd(Number.of.mites)/sqrt(length(Number.of.mites)))
report
# create the interaction plot using ggplot
plotInt <- ggplot(data=report, aes(x=Nest.content, y=mean,
group=Species, color=Species, linetype=Species))+
ggtitle("The average number of number of mites/nest")+
ylab("Number of mites")+
geom_point()+
geom_line()+
geom_errorbar(aes(ymin=lcl, ymax=ucl), width=0.2, position="dodge")
plotInt
# create two factors
ndf$SpeciesF <- factor(ndf$Species)
ndf$Nest.contentF <- factor(ndf$Nest.content)
#-------------------------------lm()-------------------------------------------------------------------
# set regression to examine the effect of Species and Nest Content on the MEAN number of parasites
my.lm.model1 <- lm(Number.of.mites ~ SpeciesF + Nest.contentF + SpeciesF:Nest.contentF, data=ndf)
my.lm.model3 <- lm(Number.of.mites ~ Nest.contentF + SpeciesF + SpeciesF:Nest.contentF, data=ndf)
my.lm.model2 <- lm(Number.of.mites ~ SpeciesF:Nest.contentF + Nest.contentF + SpeciesF, data=ndf)
# check the results
summary(my.lm.model1)
summary(my.lm.model2)
summary(my.lm.model3)
# display the F tests for the three models
anova(my.lm.model1)
anova(my.lm.model2)
anova(my.lm.model3)
#-----------------------Type III tests----------------------------------------------------
# Use the Type III tests from the Anova() function
old.options <- options()
options(contrasts=c(unordered="contr.sum", ordered="contr.poly"))
options()$contrasts
# Check the Type III tests results
Anova(my.lm.model1, type=3)
Anova(my.lm.model2, type=3)
Anova(my.lm.model3, type=3)
#---------------------check why do not match figure 1-----------------------------
# ANCOVA with Butts.weight
my.lm.model4 <- lm(Number.of.mites ~ SpeciesF+Nest.contentF+
SpeciesF:Nest.contentF+Butts.weight, data=ndf)
Anova(my.lm.model4, type=3)
# Create a vector that takes the value of TRUE for the first 42 cases
ndf$newV <- "False"
ndf$newV[ndf$Nest %in% c(1:42)] <- "True"
ndf[1:10,]
# new regression based on the subset database
my.lm.model5 <- lm(Number.of.mites ~ SpeciesF+Nest.contentF+
SpeciesF:Nest.contentF+Butts.weight, data=subset(ndf,newV=="True"))
Anova(my.lm.model5, type=3)
# Create the diagnostic plots from the last analysis
source("http://www.stat.sfu.ca/~cschwarz/Stat-650/Notes/MyPrograms/schwarz.functions.r")
sf.autoplot.lm(my.lm.model5)
# repeat the analysis based on ALL nests but using log(number of mites)
my.lm.model6 <- lm(log(Number.of.mites) ~ SpeciesF+Nest.contentF+
SpeciesF:Nest.contentF+Butts.weight, data=ndf)
Anova(my.lm.model6, type=3)
sf.autoplot.lm(my.lm.model6)
# create new vector for the two outliers
ndf$residual <- my.lm.model6$residual
ndf$newV2 <- "True"
ndf$newV2[ndf$residual %in% c(min(ndf$residual),max(ndf$residual))] <- "False"
ndf
# new regression based on the subset database
final <- lm(log(Number.of.mites) ~ SpeciesF+Nest.contentF+
SpeciesF:Nest.contentF+Butts.weight, data=subset(ndf,newV2=="True"))
result <- Anova(final, type=3)
sf.autoplot.lm(final)
options(old.options)
# make a table
table = round(data.frame(result[c(2:4)]),3)
colnames(table) <- c("Df", "F value", "Pr(>F)")
table
my.lm.model6$residual
ndf$residual <- my.lm.model6$residual
ndf$residual
ndf$newV2 <- "True"
ndf
# new regression based on the subset database
final <- lm(log(Number.of.mites) ~ SpeciesF+Nest.contentF+
SpeciesF:Nest.contentF+Butts.weight, data=subset(ndf,newV2=="True"))
result <- Anova(final, type=3)
sf.autoplot.lm(final)
options(old.options)
# make a table
table = round(data.frame(result[c(2:4)]),3)
colnames(table) <- c("Df", "F value", "Pr(>F)")
table
# create new vector for the two outliers
ndf$residual <- my.lm.model6$residual
ndf$newV2 <- "True"
ndf$newV2[ndf$residual %in% c(min(ndf$residual),max(ndf$residual))] <- "False"
ndf
#-----------------------Type III tests----------------------------------------------------
# Use the Type III tests from the Anova() function
old.options <- options()
options(contrasts=c(unordered="contr.sum", ordered="contr.poly"))
options()$contrasts
# Check the Type III tests results
Anova(my.lm.model1, type=3)
Anova(my.lm.model2, type=3)
Anova(my.lm.model3, type=3)
#---------------------check why do not match figure 1-----------------------------
# ANCOVA with Butts.weight
my.lm.model4 <- lm(Number.of.mites ~ SpeciesF+Nest.contentF+
SpeciesF:Nest.contentF+Butts.weight, data=ndf)
Anova(my.lm.model4, type=3)
# Create a vector that takes the value of TRUE for the first 42 cases
ndf$newV <- "False"
ndf$newV[ndf$Nest %in% c(1:42)] <- "True"
ndf[1:10,]
# new regression based on the subset database
my.lm.model5 <- lm(Number.of.mites ~ SpeciesF+Nest.contentF+
SpeciesF:Nest.contentF+Butts.weight, data=subset(ndf,newV=="True"))
Anova(my.lm.model5, type=3)
# Create the diagnostic plots from the last analysis
source("http://www.stat.sfu.ca/~cschwarz/Stat-650/Notes/MyPrograms/schwarz.functions.r")
sf.autoplot.lm(my.lm.model5)
# repeat the analysis based on ALL nests but using log(number of mites)
my.lm.model6 <- lm(log(Number.of.mites) ~ SpeciesF+Nest.contentF+
SpeciesF:Nest.contentF+Butts.weight, data=ndf)
Anova(my.lm.model6, type=3)
sf.autoplot.lm(my.lm.model6)
# create new vector for the two outliers
ndf$residual <- my.lm.model6$residual
ndf$newV2 <- "True"
ndf$newV2[ndf$residual %in% c(min(ndf$residual),max(ndf$residual))] <- "False"
ndf
# new regression based on the subset database
final <- lm(log(Number.of.mites) ~ SpeciesF+Nest.contentF+
SpeciesF:Nest.contentF+Butts.weight, data=subset(ndf,newV2=="True"))
result <- Anova(final, type=3)
sf.autoplot.lm(final)
options(old.options)
# make a table
table = round(data.frame(result[c(2:4)]),3)
colnames(table) <- c("Df", "F value", "Pr(>F)")
table
result
#*******************************************************
#
#  Kun, Yang   301178299
#  Stat 340, Spring 2015
#  Assignment 9, Part 3  - Cigarette Butts and Nests
#
#  Read in the cigarette butts & nest data.Examine
#  if there is the effect of Species and Nest Content
#  on the MEAN number of parasites. Check the errors of
#  the figure 1.
#
#  Change log:
#    2015-03-18 KY First Edition
#
#*******************************************************
# Assignment 09, Part 03 - Analysis of Cigarette Butts in Nests
# clear the workspace then set the current working directory.
rm(list=ls())
setwd("C:/Users/Kun/Desktop/340/R/Assignment 9/nests")
cat("Current directory is", getwd(), "\n")
# load required libraries
library(xlsx)
library(plyr)
library(ggplot2)
library(car)
# read in the data & replace -1 to missing value (NA)
ndf <- read.xlsx('nests.xls', sheetName="Correlational", header=TRUE, stringsAsFactors=FALSE)
ndf[ndf==-1] <- NA
any(ndf==-1, na.rm=TRUE)
# List the first 10 records after fixups
ndf[1:10,]
# examine the effect of Species and Nest Content on the MEAN number of parasites
# check the levels of 2 factors Species & Nest.content
levels(as.factor(ndf$Species))
levels(as.factor(ndf$Nest.content))
# comparing the number of nests measured by host species and nest content
xtabs(~Species+Nest.content, data=ndf)
# compute mean and 95% CI for mean of mites
report <- ddply(ndf, .(Species,Nest.content), summarize,
mean = mean(Number.of.mites, na.rm=TRUE),
lcl  = mean-qt(0.975,length(Number.of.mites)-1)*
sd(Number.of.mites)/sqrt(length(Number.of.mites)),
ucl  = mean+qt(0.975,length(Number.of.mites)-1)*
sd(Number.of.mites)/sqrt(length(Number.of.mites)))
report
# create the interaction plot using ggplot
plotInt <- ggplot(data=report, aes(x=Nest.content, y=mean,
group=Species, color=Species, linetype=Species))+
ggtitle("The average number of number of mites/nest")+
ylab("Number of mites")+
geom_point()+
geom_line()+
geom_errorbar(aes(ymin=lcl, ymax=ucl), width=0.2, position="dodge")
plotInt
# create two factors
ndf$SpeciesF <- factor(ndf$Species)
ndf$Nest.contentF <- factor(ndf$Nest.content)
#-------------------------------lm()-------------------------------------------------------------------
# set regression to examine the effect of Species and Nest Content on the MEAN number of parasites
my.lm.model1 <- lm(Number.of.mites ~ SpeciesF + Nest.contentF + SpeciesF:Nest.contentF, data=ndf)
my.lm.model3 <- lm(Number.of.mites ~ Nest.contentF + SpeciesF + SpeciesF:Nest.contentF, data=ndf)
my.lm.model2 <- lm(Number.of.mites ~ SpeciesF:Nest.contentF + Nest.contentF + SpeciesF, data=ndf)
# check the results
summary(my.lm.model1)
summary(my.lm.model2)
summary(my.lm.model3)
# display the F tests for the three models
anova(my.lm.model1)
anova(my.lm.model2)
anova(my.lm.model3)
#-----------------------Type III tests----------------------------------------------------
# Use the Type III tests from the Anova() function
old.options <- options()
options(contrasts=c(unordered="contr.sum", ordered="contr.poly"))
options()$contrasts
# Check the Type III tests results
Anova(my.lm.model1, type=3)
Anova(my.lm.model2, type=3)
Anova(my.lm.model3, type=3)
#---------------------check why do not match figure 1-----------------------------
# ANCOVA with Butts.weight
my.lm.model4 <- lm(Number.of.mites ~ SpeciesF+Nest.contentF+
SpeciesF:Nest.contentF+Butts.weight, data=ndf)
Anova(my.lm.model4, type=3)
# Create a vector that takes the value of TRUE for the first 42 cases
ndf$newV <- "False"
ndf$newV[ndf$Nest %in% c(1:42)] <- "True"
ndf[1:10,]
# new regression based on the subset database
my.lm.model5 <- lm(Number.of.mites ~ SpeciesF+Nest.contentF+
SpeciesF:Nest.contentF+Butts.weight, data=subset(ndf,newV=="True"))
Anova(my.lm.model5, type=3)
# Create the diagnostic plots from the last analysis
source("http://www.stat.sfu.ca/~cschwarz/Stat-650/Notes/MyPrograms/schwarz.functions.r")
sf.autoplot.lm(my.lm.model5)
# repeat the analysis based on ALL nests but using log(number of mites)
my.lm.model6 <- lm(log(Number.of.mites) ~ SpeciesF+Nest.contentF+
SpeciesF:Nest.contentF+Butts.weight, data=ndf)
Anova(my.lm.model6, type=3)
sf.autoplot.lm(my.lm.model6)
# create new vector for the two outliers
ndf$residual <- my.lm.model6$residual
ndf$newV2 <- "True"
ndf$newV2[ndf$residual %in% c(min(ndf$residual),max(ndf$residual))] <- "False"
ndf[1:10,]
#-----------------------final corrected regression------------------------------------
# new regression based on the subset database
final <- lm(log(Number.of.mites) ~ SpeciesF+Nest.contentF+
SpeciesF:Nest.contentF+Butts.weight, data=subset(ndf,newV2=="True"))
result <- Anova(final, type=3)
result
sf.autoplot.lm(final)
options(old.options)
# make a table
table = round(data.frame(result[c(2:4)]),3)
colnames(table) <- c("Df", "F value", "Pr(>F)")
table
# save the table
sink('table1.txt', split=TRUE)
table
sink()
ndf
final
str(ndf$species)
str(ndf)
summary(result)
summary(result)
str(ndf$speciesF)
str(ndf$ SpeciesF)
level(ndf$ SpeciesF)
