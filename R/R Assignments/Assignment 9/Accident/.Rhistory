#-------------------SUGARS-----------------------------------
# Sample mean percentile ci from bootstrapping
boot.ci(my.boot.results.sugars, index=1, type="perc")
# Sample median percentile ci from bootstrapping
boot.ci(my.boot.results.sugars, index=2, type="perc")
# Sample Standard Deviation percentile ci from bootstrapping
boot.ci(my.boot.results.sugars, index=3, type="perc")
# Sample Gini SD percentile ci from bootstrapping
boot.ci(my.boot.results.sugars, index=4, type="perc")
#--------------------------table-------------------------------------------------
# Rename the results
est <- my.est(cereals$sugars)
boot.se <- aaply(my.boot.results.sugars$t, 2, sd)
boot.mean.ci <- boot.ci(my.boot.results.sugars, index=1, type="perc")$percent[,4:5]
boot.median.ci <- boot.ci(my.boot.results.sugars, index=2, type="perc")$percent[,4:5]
boot.sd.ci <- boot.ci(my.boot.results.sugars, index=2, type="perc")$percent[,4:5]
boot.Gini.sd.ci <- boot.ci(my.boot.results.sugars, index=3, type="perc")$percent[,4:5]
boot.lcl<-c(boot.mean.ci[1],boot.median.ci[1], boot.sd.ci[1], boot.Gini.sd.ci[1])
boot.ucl<-c(boot.mean.ci[2],boot.median.ci[2], boot.sd.ci[2], boot.Gini.sd.ci[2])
# Create a table
table = round(data.frame(est[1:4], est[5],
est[6], est[7],
boot.se, boot.lcl, boot.ucl, na.rm=TRUE),2)
colnames(table) <- c("Estimate", "SE","Lower 95% CL", "Upper 95% CL",
"Bootstrap SE", "Bootstrap Lower 95% CL",
"Bootstrap Upper 95% CL")
table
# Create a table
table = round(data.frame(est[1:4], est[5],
est[6], est[7],
boot.se, boot.lcl, boot.ucl, na.rm=TRUE),2)
# Create a table
table = round(data.frame(est[1:4], est[5],
est[6], est[7],
boot.se, boot.lcl, boot.ucl),2)
colnames(table) <- c("Estimate", "SE","Lower 95% CL", "Upper 95% CL",
"Bootstrap SE", "Bootstrap Lower 95% CL",
"Bootstrap Upper 95% CL")
table
# Create a table
table = round(c(est[1:4], est[5],
est[6], est[7],
boot.se, boot.lcl, boot.ucl),2)
colnames(table) <- c("Estimate", "SE","Lower 95% CL", "Upper 95% CL",
"Bootstrap SE", "Bootstrap Lower 95% CL",
"Bootstrap Upper 95% CL")
table
# Create a table
table = round(c(est[1:4], est[5],
est[6], est[7],
boot.se, boot.lcl, boot.ucl),2)
table
# Create a table
table = round(c(est, est[5],
est[6], est[7],
boot.se, boot.lcl, boot.ucl),2)
table
# Create a table
table = round(data.frame(est[1:4], est[5],
est[6], est[7],
boot.se, boot.lcl, boot.ucl),2)
colnames(table) <- c("Estimate", "SE","Lower 95% CL", "Upper 95% CL",
"Bootstrap SE", "Bootstrap Lower 95% CL",
"Bootstrap Upper 95% CL")
table
# Rename the results
est <- my.est(cereals$sugars)[1:4]
# Rename the results
est <- my.est(cereals$sugars)[1:4]
se <- c(my.est(cereals$sugars)[5], NA, NA)
lcl <- c(my.est(cereals$sugars)[6], NA, NA)
ucl <- c(my.est(cereals$sugars)[7], NA, NA)
#--------------------------table-------------------------------------------------
# extract the results
est <- my.est(cereals$sugars)[1:4]
se <- c(my.est(cereals$sugars)[5], NA, NA)
lcl <- c(my.est(cereals$sugars)[6], NA, NA)
ucl <- c(my.est(cereals$sugars)[7], NA, NA)
boot.se <- aaply(my.boot.results.sugars$t, 2, sd)
boot.mean.ci <- boot.ci(my.boot.results.sugars, index=1, type="perc")$percent[,4:5]
boot.median.ci <- boot.ci(my.boot.results.sugars, index=2, type="perc")$percent[,4:5]
boot.sd.ci <- boot.ci(my.boot.results.sugars, index=2, type="perc")$percent[,4:5]
boot.Gini.sd.ci <- boot.ci(my.boot.results.sugars, index=3, type="perc")$percent[,4:5]
boot.lcl<-c(boot.mean.ci[1],boot.median.ci[1], boot.sd.ci[1], boot.Gini.sd.ci[1])
boot.ucl<-c(boot.mean.ci[2],boot.median.ci[2], boot.sd.ci[2], boot.Gini.sd.ci[2])
# Create a table
table = round(data.frame(est, se,lcl, ucl,
boot.se, boot.lcl, boot.ucl),2)
colnames(table) <- c("Estimate", "SE","Lower 95% CL", "Upper 95% CL",
"Bootstrap SE", "Bootstrap Lower 95% CL",
"Bootstrap Upper 95% CL")
table
est
se
lcl
ucl
#--------------------------table-------------------------------------------------
# extract the results
est <- my.est(cereals$sugars)[1:4]
se <- c(my.est(cereals$sugars)[5], NA, NA, NA)
lcl <- c(my.est(cereals$sugars)[6], NA, NA, NA)
ucl <- c(my.est(cereals$sugars)[7], NA, NA, NA)
boot.se <- aaply(my.boot.results.sugars$t, 2, sd)
boot.mean.ci <- boot.ci(my.boot.results.sugars, index=1, type="perc")$percent[,4:5]
boot.median.ci <- boot.ci(my.boot.results.sugars, index=2, type="perc")$percent[,4:5]
boot.sd.ci <- boot.ci(my.boot.results.sugars, index=2, type="perc")$percent[,4:5]
boot.Gini.sd.ci <- boot.ci(my.boot.results.sugars, index=3, type="perc")$percent[,4:5]
boot.lcl<-c(boot.mean.ci[1],boot.median.ci[1], boot.sd.ci[1], boot.Gini.sd.ci[1])
boot.ucl<-c(boot.mean.ci[2],boot.median.ci[2], boot.sd.ci[2], boot.Gini.sd.ci[2])
# Create a table
table = round(data.frame(est, se,lcl, ucl,
boot.se, boot.lcl, boot.ucl),2)
colnames(table) <- c("Estimate", "SE","Lower 95% CL", "Upper 95% CL",
"Bootstrap SE", "Bootstrap Lower 95% CL",
"Bootstrap Upper 95% CL")
table
# Create a table
table = round(data.frame(est, se,lcl, ucl,
boot.se, boot.lcl, boot.ucl),2)
colnames(table) <- c("Estimate", "SE","95% LCL", "95% UCL",
"Bootstrap SE", "Bootstrap 95% LCL",
"Bootstrap 95% UCL")
table
# save the table
sink('table1.txt', split=TRUE)
table
sink()
# save the table
sink('table1.txt', split=TRUE)
table
sink()
# Create a table
table = round(data.frame(est, se,lcl, ucl,
boot.se, boot.lcl, boot.ucl),2)
colnames(table) <- c("Estimate", "SE","95% LCL", "95% UCL",
"Boot.SE", "Boots.LCL",
"Boot.UCL")
table
# Create a table
table = round(data.frame(est, se,lcl, ucl,
boot.se, boot.lcl, boot.ucl),2)
colnames(table) <- c("Estimate", "SE", "LCL", "UCL",
"Boot.SE", "Boots.LCL",
"Boot.UCL")
table
# save the table
sink('table1.txt', split=TRUE)
table
sink()
ldply(c(100,200), AI.sim, radf=radf, nsamples=1000)
#*******************************************************
#
#  Kun, Yang   301178299
#  Stat 340, Spring 2015
#  Assignment 9, Part 2  - Cereal
#
#  Read in the accidents data, test hypotheses.Examine
#  if there is evidence of a difference in the odds of fatality
#  among the various hours.Create the plot of fatality rate.
#
#  Change log:
#    2015-03-16 KY First Edition
#
#*******************************************************
# Assignment 9, Part 2 - Analysis of accidents data
# clear the workspace then set & show the current working directory.
rm(list=ls())
setwd("C:/Users/Kun/Desktop/340/R/Assignment 9/Accident")
cat("Current directory is", getwd(), "\n")
# load required libraries
library(plyr)
# read in the data
radf <- read.csv("road-accidents-2010.csv", as.is=TRUE, strip.white=TRUE,
header=TRUE, fill=TRUE)
# remove the missing value (NA)
radf[radf==-1] <- NA
radf <- radf[!is.na(radf$Number_of_Vehicles),]
radf <- radf[!is.na(radf$Number_of_Casualties),]
radf <- radf[!is.na(radf$Accident_Severity),]
# create the variable AccidentIndex
radf <- transform(radf, AccidentIndex=Number_of_Vehicles*Number_of_Casualties/Accident_Severity)
# print the first 10 records after fixedup
radf[1:10,]
#-----------------------set the function---------------------------------
# Select a random sample of size 10 from the accident data frame
my.sample <- sample(1:nrow(radf), size=10, replace=FALSE)
my.sample
# function containing the sample size, the mean and the 90th percentile
# of a sample of the accident index values
AI.stat <- function(radf, sample.size){
my.sample <- sample(1:nrow(radf), size=sample.size, replace=FALSE)
sampled.acc.index <- radf$AccidentIndex [my.sample]
mean <- mean(sampled.acc.index)
per90 <- quantile(sampled.acc.index, .90)
res<- c(sample.size, mean, per90)
names(res) <- c("sample.size", "mean","per90")
return(res)
}
# Check the function
AI.stat(radf, 10)
AI.stat(radf, 10)
AI.stat(radf,100)
AI.stat(radf,100)
# repeatedly apply the function
my.result <- rdply(5, AI.stat(radf=radf, sample.size=10), .id="rep")
my.result
#-----------------------SE of the statistics-----------------------------------
# Create a new function that compute the sd of the mean and per90 values
AI.sim <- function (sample.size, radf, nsamples=1000){
# After all samples are generated, compute the sd of the mean and per90 values
my.result <- rdply(nsamples, AI.stat(radf=radf, sample.size=sample.size), .id="rep")
se.mean <- sd(my.result$mean)
se.per90 <- sd(my.result$per90)
res<- c(sample.size, se.mean, se.per90)
names(res) <- c("sample.size","se.mean","se.per90")
return(res)
}
# check the new function
AI.sim(sample.size=20, radf=radf, nsamples=100)
AI.sim(sample.size=20, radf=radf, nsamples=100)
AI.sim(sample.size=200, radf=radf, nsamples=100)
AI.sim(sample.size=2000, radf=radf, nsamples=100)
#
ldply(c(100,200), AI.sim, radf=radf, nsamples=1000)
#*******************************************************
#
#  Kun, Yang   301178299
#  Stat 340, Spring 2015
#  Assignment 9, Part 2  - Cereal
#
#  Read in the accidents data, test hypotheses.Examine
#  if there is evidence of a difference in the odds of fatality
#  among the various hours.Create the plot of fatality rate.
#
#  Change log:
#    2015-03-16 KY First Edition
#
#*******************************************************
# Assignment 9, Part 2 - Analysis of accidents data
# clear the workspace then set & show the current working directory.
rm(list=ls())
setwd("C:/Users/Kun/Desktop/340/R/Assignment 9/Accident")
cat("Current directory is", getwd(), "\n")
# load required libraries
library(plyr)
# read in the data
radf <- read.csv("road-accidents-2010.csv", as.is=TRUE, strip.white=TRUE,
header=TRUE, fill=TRUE)
# remove the missing value (NA)
radf[radf==-1] <- NA
radf <- radf[!is.na(radf$Number_of_Vehicles),]
radf <- radf[!is.na(radf$Number_of_Casualties),]
radf <- radf[!is.na(radf$Accident_Severity),]
# create the variable AccidentIndex
radf <- transform(radf, AccidentIndex=Number_of_Vehicles*Number_of_Casualties/Accident_Severity)
# print the first 10 records after fixedup
radf[1:10,]
#-----------------------set the function---------------------------------
# Select a random sample of size 10 from the accident data frame
my.sample <- sample(1:nrow(radf), size=10, replace=FALSE)
my.sample
# function containing the sample size, the mean and the 90th percentile
# of a sample of the accident index values
AI.stat <- function(radf, sample.size){
my.sample <- sample(1:nrow(radf), size=sample.size, replace=FALSE)
sampled.acc.index <- radf$AccidentIndex [my.sample]
mean <- mean(sampled.acc.index)
per90 <- quantile(sampled.acc.index, .90)
res<- c(sample.size, mean, per90)
names(res) <- c("sample.size", "mean","per90")
return(res)
}
# Check the function
AI.stat(radf, 10)
AI.stat(radf, 10)
AI.stat(radf,100)
AI.stat(radf,100)
# repeatedly apply the function
my.result <- rdply(5, AI.stat(radf=radf, sample.size=10), .id="rep")
my.result
#-----------------------SE of the statistics-----------------------------------
# Create a new function that compute the sd of the mean and per90 values
AI.sim <- function (sample.size, radf, nsamples=1000){
# After all samples are generated, compute the sd of the mean and per90 values
my.result <- rdply(nsamples, AI.stat(radf=radf, sample.size=sample.size), .id="rep")
se.mean <- sd(my.result$mean)
se.per90 <- sd(my.result$per90)
res<- c(sample.size, se.mean, se.per90)
names(res) <- c("sample.size","se.mean","se.per90")
return(res)
}
# check the new function
AI.sim(sample.size=20, radf=radf, nsamples=100)
AI.sim(sample.size=20, radf=radf, nsamples=100)
AI.sim(sample.size=200, radf=radf, nsamples=100)
AI.sim(sample.size=2000, radf=radf, nsamples=100)
#
ldply(c(100,200), AI.sim, radf=radf, nsamples=1000)
ldply(c(100,200,400,1000,2000,4000), AI.sim, radf=radf, nsamples=1000)
radf <- transform(radf, log.sample.size=log(sample.size))
log.sample.size=log(sample.size)
# load required libraries
library(plyr)
library(reshape2)
#-----------------------SE of the statistics-----------------------------------
# Create a new function that compute the sd of the mean and per90 values
AI.sim <- function (sample.size, radf, nsamples=1000){
# After all samples are generated, compute the sd of the mean and per90 values
my.result <- rdply(nsamples, AI.stat(radf=radf, sample.size=sample.size), id="rep")
se.mean <- sd(my.result$mean)
se.per90 <- sd(my.result$per90)
res<- c(sample.size, se.mean, se.per90)
names(res) <- c("sample.size","se.mean","se.per90")
return(res)
}
# check the new function
AI.sim(sample.size=20, radf=radf, nsamples=100)
AI.sim(sample.size=20, radf=radf, nsamples=100)
AI.sim(sample.size=200, radf=radf, nsamples=100)
AI.sim(sample.size=2000, radf=radf, nsamples=100)
#-----------------------SE of the statistics-----------------------------------
# Create a new function that compute the sd of the mean and per90 values
AI.sim <- function (sample.size, radf, nsamples=1000){
# After all samples are generated, compute the sd of the mean and per90 values
my.result <- rdply(nsamples, AI.stat(radf=radf, sample.size=sample.size). .id="rep")
se.mean <- sd(my.result$mean)
se.per90 <- sd(my.result$per90)
res<- c(sample.size, se.mean, se.per90)
names(res) <- c("sample.size","se.mean","se.per90")
return(res)
}
# check the new function
AI.sim(sample.size=20, radf=radf, nsamples=100)
AI.sim(sample.size=20, radf=radf, nsamples=100)
AI.sim(sample.size=200, radf=radf, nsamples=100)
AI.sim(sample.size=2000, radf=radf, nsamples=100)
#-----------------------SE of the statistics-----------------------------------
# Create a new function that compute the sd of the mean and per90 values
AI.sim <- function (sample.size, radf, nsamples=1000){
# After all samples are generated, compute the sd of the mean and per90 values
my.result <- rdply(nsamples, AI.stat(radf=radf, sample.size=sample.size), .id="rep")
se.mean <- sd(my.result$mean)
se.per90 <- sd(my.result$per90)
res<- c(sample.size, se.mean, se.per90)
names(res) <- c("sample.size","se.mean","se.per90")
return(res)
}
# check the new function
AI.sim(sample.size=20, radf=radf, nsamples=100)
AI.sim(sample.size=20, radf=radf, nsamples=100)
AI.sim(sample.size=200, radf=radf, nsamples=100)
AI.sim(sample.size=2000, radf=radf, nsamples=100)
# call the AI.sim() function with sample sizes 100,200,400,1000,2000 and 4000
ldply(c(100,200,400,1000,2000,4000), AI.sim, radf=radf, nsamples=1000)
# call the AI.sim() function with sample sizes 100,200,400,1000,2000 and 4000
ldply(c(100,200,400,1000,2000,4000), AI.sim, radf=radf, nsamples=1000)
# converts from wide-format to long-format
my.result2 <-melt(my.result, id="sample.size")
my.result2
# call the AI.sim() function with sample sizes 100,200,400,1000,2000 and 4000
my.result <- ldply(c(100,200,400,1000,2000,4000), AI.sim, radf=radf, nsamples=1000)
my.result <- ldply(c(100,200,400,1000,2000,4000), AI.sim, radf=radf, nsamples=1000)
my.result
# converts from wide-format to long-format
my.result2 <-melt(my.result, id="sample.size")
my.result2
# plot the relationship between the log(se) of each statistic and log(n).
plot <- ggplot(data=my.result2, aes(x=log(sample.size), y=log(value),
group=variable, color=variable, shape=variable, linetype=variable))+
ggtitle("The relationship between the log(se) of each statistic and log(n)")+
xlab("Log(n)")+ylab("Log(se) of each statistic")+
geom_point()+
geom_line ()+
geom_smooth(method="lm",se=FALSE)
plot
# load required libraries
library(plyr)
library(reshape2)
library(ggplot2)
# plot the relationship between the log(se) of each statistic and log(n).
plot <- ggplot(data=my.result2, aes(x=log(sample.size), y=log(value),
group=variable, color=variable, shape=variable, linetype=variable))+
ggtitle("The relationship between the log(se) of each statistic and log(n)")+
xlab("Log(n)")+ylab("Log(se) of each statistic")+
geom_point()+
geom_line ()+
geom_smooth(method="lm",se=FALSE)
plot
# call the AI.sim() function with sample sizes 100,200,400,1000,2000 and 4000
my.result <- ldply(c(100,200,400,1000,2000,4000), AI.sim, radf=radf, nsamples=1000)
my.result
# Create derived variables for the log(sample size), log(se_p90), and log(se_mean).
my.result$log.sample.size=log(sample.size)
# Create derived variables for the log(sample size), log(se_p90), and log(se_mean).
my.result$log.sample.size=log(my.result$sample.size)
my.result
# Create derived variables for the log(sample size), log(se p90), and log(se mean).
my.result$log.sample.size = log(my.result$sample.size)
my.result$log.mean = log(my.result$mean)
my.result$log.se.per90 = log(my.result$se.per90)
# Create derived variables for the log(sample size), log(se p90), and log(se mean).
my.result$log.sample.size = log(my.result$sample.size)
my.result$log.mean = log(my.result$se.mean)
my.result$log.se.per90 = log(my.result$se.per90)
my.result
# Create derived variables for the log(sample size), log(se p90), and log(se mean).
my.result$log.sample.size = log(my.result$sample.size)
my.result$log.se.mean = log(my.result$se.mean)
my.result$log.se.per90 = log(my.result$se.per90)
my.result
# Fit a line to the relationship between the log(sample size) and the log(se) for the two statistics.
lm <- lm(log.sample.size ~log.se.mean+log.se.per90, data=my.result)
lm
# Fit a line to the relationship between the log(sample size) and the log(se) for the two statistics.
lm.mean <- lm(log.sample.size ~log.se.mean, data=my.result)
lm
# Fit a line to the relationship between the log(sample size) and the log(se) for the two statistics.
lm.mean <- lm(log.sample.size ~log.se.mean, data=my.result)
lm
lm.mean
lm.per90 <- lm(log.sample.size ~log.se.per90, data=my.result)
lm.per90
lm.mean <- lm(log.sample.size ~c(log.se.mean,log.se.per90 ), data=my.result)
lm.mean
# Fit a line to the relationship between the log(sample size) and the log(se) for the two statistics.
lm.mean <- lm(log.sample.size ~c(log.se.mean,log.se.per90 ), data=my.result)
lm.mean
# converts from wide-format to long-format
my.result2 <-melt(my.result[1:3], id="sample.size")
my.result2
my.result
coef(my.result2)
coef(lm.per90)
coef(lm.mean)
summary(lm.mean)
cld(lm.mean)
anova(lm.mean)
lm.mean <- lm(log.sample.size ~ log.se.mean+log.se.per90, data=my.result)
coef(lm.mean)
lm.mean <- lm(log.sample.size ~ log.se.mean*log.se.per90, data=my.result)
coef(lm.mean)
lm.per90 <- lm(log.sample.size ~log.se.per90, data=my.result)
coef(lm.per90)
anova(lm.mean
anova(lm.mean)
lm.per90 <- lm(log.sample.size ~log.se.per90, data=my.result)
anova(lm.mean)
lm.mean <- lm(log.sample.size ~ log.se.mean*log.se.per90, data=my.result)
coef(lm.mean)
lm.per90 <- lm(log.sample.size ~log.se.per90, data=my.result)
coef(lm.per90)
# converts from wide-format to long-format
my.result2 <-melt(my.result[1:3], id="sample.size")
my.result2
# plot the relationship between the log(se) of each statistic and log(n).
plot <- ggplot(data=my.result2, aes(x=log(sample.size), y=log(value),
group=variable, color=variable, shape=variable, linetype=variable))+
ggtitle("The relationship between the log(se) of each statistic and log(n)")+
xlab("Log(n)")+ylab("Log(se) of each statistic")+
geom_point()+
geom_line ()+
geom_smooth(method="lm",se=FALSE)
plot
# Fit a line to the relationship between the log(sample size) and the log(se) for the two statistics.
lm.mean <- lm(log.sample.size ~ log.se.mean*log.se.per90, data=my.result)
coef(lm.mean)
lm.per90 <- lm(log.sample.size ~log.se.per90, data=my.result)
coef(lm.per90)
# Fit a line to the relationship between the log(sample size) and the log(se) for the two statistics.
lm.mean <- lm(log.sample.size ~ log.se.mean, data=my.result)
coef(lm.mean)
lm.per90 <- lm(log.sample.size ~log.se.per90, data=my.result)
coef(lm.per90)
lm.mean <- lm(log.sample.size ~ log.se.mean, data=my.result)
coef(lm.mean)
confint(lm.mean, 'log.se.mean', level=0.95)
lm.per90 <- lm(log.sample.size ~log.se.per90, data=my.result)
coef(lm.per90)
confint(lm.per90, 'log.se.per90', level=0.95)
# Fit a line to the relationship between the log(sample size) and the log(se) for the two statistics.
lm.mean <- lm(log.sample.size ~ log.se.mean, data=my.result)
slop.mean <- coef(lm.mean)
ci.mean <- confint(lm.mean, 'log.se.mean', level=0.95)
lm.per90 <- lm(log.sample.size ~log.se.per90, data=my.result)
slop.per90 <- coef(lm.per90)
ci.per90 <- confint(lm.per90, 'log.se.per90', level=0.95)
table = round(data.frame(slop.mean,ci.mean,slop.per90, ci.per90),2)
table
lm.mean <- lm(log.sample.size ~ log.se.mean, data=my.result)
slop.mean <- coef(lm.mean)[2]
ci.mean <- confint(lm.mean, 'log.se.mean', level=0.95)
lm.per90 <- lm(log.sample.size ~log.se.per90, data=my.result)
slop.per90 <- coef(lm.per90)[2]
ci.per90 <- confint(lm.per90, 'log.se.per90', level=0.95)
table = round(data.frame(slop.mean,ci.mean,slop.per90, ci.per90),2)
colnames(table) <- c("slop.mean","mean.LCL","mean.UCL",
"slope.per90","per90.LCL","per90.UCL")
table
# converts from wide-format to long-format
my.result2 <-melt(my.result[1:3], id="sample.size")
my.result2
# plot the relationship between the log(se) of each statistic and log(n).
plot <- ggplot(data=my.result2, aes(x=log(sample.size), y=log(value),
group=variable, color=variable, shape=variable, linetype=variable))+
ggtitle("The relationship between the log(se) of each statistic and log(n)")+
xlab("Log(n)")+ylab("Log(se) of each statistic")+
geom_point()+
geom_line ()+
geom_smooth(method="lm",se=FALSE)
plot
# save the plot and table
ggsave(plot, file='plot.png', h=4, w=6, units="in", dpi=200)
