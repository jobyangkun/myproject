#----------------------MLE,CI---by using nlm-----------------------------------------
# find the MLE
mle <- nlm(preg.in.month.log.lik, c(0,0), hessian=TRUE,
return.negative=TRUE, data=my.data)
mle
# find the MLE
mle <- nlm(preg.in.month.log.lik, sum(data$months*log(1-p))+log(p)*sum(data$censored==0), hessian=TRUE,
return.negative=TRUE, data=my.data)
mle
# find the MLE
mle <- nlm(preg.in.month.log.lik, sum(my.data$months*log(1-p))+log(p)*sum(my.data$censored==0), hessian=TRUE,
return.negative=TRUE, data=my.data)
mle
# find the standard error
mle$se <- sqrt(diag(solve(mle$hessian)))
# Assignment 10, Part 01 - Analysis of Sex
# clear the workspace then set the current working directory.
rm(list=ls())
setwd("C:/Users/Kun/Desktop/340/R/Assignment 10/sex")
cat("Current directory is", getwd(), "\n")
# load the package
library(plyr)
library(ggplot2)
library(bbmle)
# Create a data frame that has two variables
my.data <- data.frame(
months = c(2,7,5,0,0,3,0,4,10),
censored=c(0,0,0,0,0,0,0,0,1))
my.data
# set a function for log-likelihood
log.like <- function(p, data, return.negll=FALSE){
log.like <- sum(data$months*log(1-p))+log(p)*sum(data$censored==0)
if(return.negll){log.like <- -log.like}
return(log.like)
}
# Test the function
log.like (.2, my.data)
log.like (.2, my.data, return.negll=TRUE)
#-------------------plot the log-likelihood function-----------------------------
# set the range of the parameter
lambda <- seq(0,0.5,.01)
lambda[1:10]
# make plot
plot.points <- laply(lambda, preg.in.month.log.lik, data=my.data)
plot(lambda, plot.points, type="l")
# make plot
plot.points <- laply(lambda, log.like, data=my.data)
plot(lambda, plot.points, type="l")
# find the MLE
mle <- nlm(log.like, sum(my.data$months*log(1-p))+log(p)*sum(my.data$censored==0), hessian=TRUE,
return.negative=TRUE, data=my.data)
# find the MLE
mle <- nlm(log.like, c(0,0), hessian=TRUE,
return.negative=TRUE, data=my.data)
mle
# find the MLE
mle <- nlm(log.like, sum(data$months*log(1-p))+log(p)*sum(data$censored==0), hessian=TRUE,
return.negative=TRUE, data=my.data)
mle
# find the MLE
mle <- nlm(log.like, sum(data$months*log(1-lambda))+log(lambda)*sum(data$censored==0), hessian=TRUE,
return.negative=TRUE, data=my.data)
mle
# find the MLE
mle <- nlm(log.like, 0, hessian=TRUE,
return.negative=TRUE, data=my.data)
mle
mle <- nlm(log.lik, c(0), hessian=TRUE,
data=my.data, return.negative=TRUE)
mle
# find the MLE
mle <- nlm(log.like, c(0), hessian=TRUE,
data=my.data, return.negative=TRUE)
mle
mle <- nlm(log.like, 0, hessian=TRUE,
data=my.data, return.negative=TRUE)
mle
mle <- nlm(log.like, 0, hessian=TRUE,
data=my.data, return.negative=TRUE)
mle
# find the MLE
mle <- nlm(log.like, sum(data$months*log(1))+log(0)*sum(data$censored==0), hessian=TRUE,
data=my.data, return.negative=TRUE)
mle
mle <- nlm(log.like, 1/(ave(data$months)+1), hessian=TRUE,
data=my.data, return.negative=TRUE)
mle
ave(data$months)
my.data
ave(my.data$months)
mle <- nlm(log.like, 1/(ave(my.data$months)+1), hessian=TRUE,
data=my.data, return.negative=TRUE)
mle
# find the MLE
mle <- nlm(log.like, sum(my.data$months*log(1))+log(0)*sum(my.data$censored==0), hessian=TRUE,
data=my.data, return.negative=TRUE)
mle
#*******************************************************
#
#  Kun, Yang   301178299
#  Stat 340, Spring 2015
#  Assignment 10, Part 1  - Sex
#
#  Read in the cigarette butts & nest data.Examine
#  if there is the effect of Species and Nest Content
#  on the MEAN number of parasites. Check the errors of
#  the figure 1.
#
#  Change log:
#    2015-03-24 KY First Edition
#
#*******************************************************
# Assignment 10, Part 01 - Analysis of Sex
# clear the workspace then set the current working directory.
rm(list=ls())
setwd("C:/Users/Kun/Desktop/340/R/Assignment 10/sex")
cat("Current directory is", getwd(), "\n")
# load the package
library(plyr)
library(ggplot2)
library(bbmle)
# Create a data frame that has two variables
my.data <- data.frame(
months = c(2,7,5,0,0,3,0,4,10),
censored=c(0,0,0,0,0,0,0,0,1))
my.data
# set a function for log-likelihood
log.like <- function(p, data, return.negll=FALSE){
log.like <- sum(data$months*log(1-p))+log(p)*sum(data$censored==0)
if(return.negll){log.like <- -log.like}
return(log.like)
}
# Test the function
log.like (.2, my.data)
log.like (.2, my.data, return.negll=TRUE)
#-------------------plot the log-likelihood function-----------------------------
# set the range of the parameter
lambda <- seq(0,0.5,.01)
lambda[1:10]
# make plot
plot.points <- laply(lambda, log.like, data=my.data)
plot(lambda, plot.points, type="l")
#----------------------MLE,CI---by using nlm-----------------------------------------
# find the MLE
mle <- nlm(log.like, sum(my.data$months*log(1))+log(0)*sum(my.data$censored==0), hessian=TRUE,
data=my.data, return.negative=TRUE)
mle
mle <- nlm(log.like, 0, hessian=TRUE,
data=my.data, return.negative=TRUE)
mle
#*******************************************************
#
#  Kun, Yang   301178299
#  Stat 340, Spring 2015
#  Assignment 10, Part 1  - Sex
#
#  Read in the cigarette butts & nest data.Examine
#  if there is the effect of Species and Nest Content
#  on the MEAN number of parasites. Check the errors of
#  the figure 1.
#
#  Change log:
#    2015-03-24 KY First Edition
#
#*******************************************************
# Assignment 10, Part 01 - Analysis of Sex
# clear the workspace then set the current working directory.
rm(list=ls())
setwd("C:/Users/Kun/Desktop/340/R/Assignment 10/sex")
cat("Current directory is", getwd(), "\n")
# load the package
library(plyr)
library(ggplot2)
library(bbmle)
# Create a data frame that has two variables
my.data <- data.frame(
months = c(2,7,5,0,0,3,0,4,10),
censored=c(0,0,0,0,0,0,0,0,1))
my.data
# set a function for log-likelihood
log.like <- function(p, data, return.negll=FALSE){
log.like <- sum(data$months*log(1-p))+log(p)*sum(data$censored==0)
if(return.negll){log.like <- -log.like}
return(log.like)
}
# Test the function
log.like (.2, my.data)
log.like (.2, my.data, return.negll=TRUE)
#-------------------plot the log-likelihood function-----------------------------
# set the range of the parameter
lambda <- seq(0,0.5,.01)
lambda[1:10]
# make plot
plot.points <- laply(lambda, log.like, data=my.data)
plot(lambda, plot.points, type="l")
#----------------------MLE,CI---by using nlm-----------------------------------------
# find the MLE
mle <- nlm(log.like, 0, hessian=TRUE,
data=my.data, return.negative=TRUE)
mle
#----------------------MLE,CI---by using nlm-----------------------------------------
# find the MLE
mle <- nlm(log.like, p=rep(0,7), hessian=TRUE,
data=my.data, return.negative=TRUE)
mle
mle <- nlm(log.like, p=c(0), hessian=TRUE,
data=my.data, return.negative=TRUE)
mle
mle <- nlm(log.like, 0, hessian=TRUE,
data=my.data, return.negative=TRUE)
mle
# Test the function
log.like (.2, my.data)
log.like (.2, my.data, return.negll=TRUE)
mle <- nlm(log.like, 0, hessian=TRUE,
data=my.data, return.negll=FALSE)
mle
mle <- nlm(log.like, 0, hessian=TRUE,
data=my.data, return.negll=FALSE)
# Test the function
log.like (.2, my.data)
log.like (.2, my.data, return.negll=TRUE)
mle <- nlm(log.like, 0, hessian=TRUE,
data=my.data, return.negative=TRUE)
mle <- nlm(log.like, p=0, hessian=TRUE,
data=my.data, return.negative=TRUE)
# repeat the optimization using the mle2()
mle2 <- mle2(preg.in.month.log.lik, list(p=0),
data=list(data=my.data, return.negative=TRUE))
mle2 <- mle2(preg.in.month.log.like, list(p=0),
data=list(data=my.data, return.negative=TRUE))
# repeat the optimization using the mle2()
mle2 <- mle2(log.like, list(p=0),
data=list(data=my.data, return.negative=TRUE))
mle2 <- mle2(log.like, list(0),
data=list(data=my.data, return.negative=TRUE))
mle2 <- mle2(log.like, list(p=0),
data=list(data=my.data, return.negative=TRUE))
mle2 <- mle2(log.like, list(par = 0),
data=list(data=my.data, return.negative=TRUE))
mle <- nlm(log.like, p=0, data=my.data, hessian=TRUE, return.negative=TRUE)
mle <- nlm(log.like, 0, data=my.data, hessian=TRUE, return.negative=TRUE)
mle <- nlm(log.like,c=(0), data=my.data, hessian=TRUE, return.negative=TRUE)
mle <- nlm(log.like, c(0,0), data=my.data, hessian=TRUE, return.negative=TRUE)
mle <- nlm(log.like, c(0), data=my.data, hessian=TRUE, return.negative=TRUE)
mle <- nlm(log.like, 1, data=my.data, hessian=TRUE, return.negative=TRUE)
mle <- nlm(log.like, c(p=0), data=my.data, hessian=TRUE, return.negative=TRUE)
mle <- nlm(log.like, c(p=0), data=my.data, hessian=TRUE)
mle <- nlm(log.like, c(p=0), data=my.data, hessian=TRUE, return.negative=TRUE)
mle <- nlm(log.like, p=c(0), data=my.data, hessian=TRUE, return.negative=TRUE)
mle <- nlm(log.like, p=c(0,0), data=my.data, hessian=TRUE, return.negative=TRUE)
mle <- nlm(log.like, p=c(0,0), data=my.data, hessian=TRUE, return.negative=TRUE)
mle <- nlm(log.like, p=c(1,0), data=my.data, hessian=TRUE, return.negative=TRUE)
mle <- nlm(log.like, p=c(0,1), data=my.data, hessian=TRUE, return.negative=TRUE)
mle <- nlm(log.like, p=c(0,9), data=my.data, hessian=TRUE, return.negative=TRUE)
# find the MLE
mle <- nlm(log.like, p=c(0,9), data=my.data, hessian=TRUE, return.negll=TRUE)
mle <- nlm(log.like, 0, data=my.data, hessian=TRUE, return.negll=TRUE)
mle
mle <- nlm(log.like, c(0), data=my.data, hessian=TRUE, return.negll=TRUE)
mle <- nlm(log.like, c(0,0), data=my.data, hessian=TRUE, return.negll=TRUE)
mle <- nlm(log.like, c(0,0), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(0), data=my.data, return.negll=TRUE, hessian=TRUE)
#*******************************************************
#
#  Kun, Yang   301178299
#  Stat 340, Spring 2015
#  Assignment 10, Part 1  - Sex
#
#  Read in the cigarette butts & nest data.Examine
#  if there is the effect of Species and Nest Content
#  on the MEAN number of parasites. Check the errors of
#  the figure 1.
#
#  Change log:
#    2015-03-24 KY First Edition
#
#*******************************************************
# Assignment 10, Part 01 - Analysis of Sex
# clear the workspace then set the current working directory.
rm(list=ls())
setwd("C:/Users/Kun/Desktop/340/R/Assignment 10/sex")
cat("Current directory is", getwd(), "\n")
# load the package
library(plyr)
library(ggplot2)
library(bbmle)
# Create a data frame that has two variables
my.data <- data.frame(
months = c(2,7,5,0,0,3,0,4,10),
censored=c(0,0,0,0,0,0,0,0,1))
my.data
# set a function for log-likelihood
log.like <- function(p, data, return.negll=FALSE){
log.like <- sum(data$months*log(1-p))+log(p)*sum(data$censored==0)
if(return.negll){log.like <- -log.like}
return(log.like)
}
# Test the function
log.like (.2, my.data)
log.like (.2, my.data, return.negll=TRUE)
#-------------------plot the log-likelihood function-----------------------------
# set the range of the parameter
lambda <- seq(0,0.5,.01)
lambda[1:10]
# make plot
plot.points <- laply(lambda, log.like, data=my.data)
plot(lambda, plot.points, type="l")
#----------------------MLE,CI---by using nlm-----------------------------------------
# find the MLE
mle <- nlm(log.like, 0, data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(10,10), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(0,10), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(0,1), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(0,0), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(0,9), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(0,8), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(0,1-0), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(-50,20), data=my.data, return.negll=TRUE, hessian=TRUE)
mle
# find the MLE
mle <- nlm(log.like, c(0,0), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(0,1), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(0,8), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(0,9), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(8,1), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(0), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(0,), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(,0), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(0), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(0), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(1,0), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(8,0), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(9,0), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(2,0), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(2,0), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(0.5, 0.5), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(0, 0), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(0), data=my.data, return.negll=TRUE, hessian=TRUE)
ave(my.data$months)
mle <- nlm(log.like, 1/(ave(my.data$months)+1), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, 1/(my.data$months+1), data=my.data, return.negll=TRUE, hessian=TRUE)
# set a function for log-likelihood
log.like <- function(p, data, return.negll=FALSE){
log.like <- sum(data$months*log(1-p))+log(p)*sum(data$censored==0)
if(return.negll){log.like <- -log.like}
return(log.like)
}
# Test the function
log.like (.2, my.data)
log.like (.2, my.data, return.negll=TRUE)
mle <- nlm(log.like, 1, data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, sum(data$months*log(1-p))+log(p)*sum(data$censored==0), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, sum(data$months*log(1-p))+log(p)*sum(data$censored==0), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, sum(my.data$months*log(1-p))+log(p)*sum(my.data$censored==0), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, sum(my.data$months*log(1))+log(0)*sum(my.data$censored==0), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, sum(my.data$months*log(1))+log(0)*sum(my.data$censored==0), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(1), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(1,0), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(1,0), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(1,10), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(10,1), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(10,1), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(2), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, 2, data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, 0, data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, 4, data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(0,10), data=my.data, return.negll=TRUE, hessian=TRUE)
mle <- nlm(log.like, c(0,0), data=my.data, return.negll=TRUE, hessian=TRUE)
# Assignment 10, Part 01 - interesting
# clear the workspace then set the current working directory.
rm(list=ls())
setwd("C:/Users/Kun/Desktop/340/R/Assignment 10/interesting")
cat("Current directory is", getwd(), "\n")
# load required libraries
library(ggplot2)
# Read in the data
cereals <- read.csv('interesting2.csv', as.is=TRUE, fill=TRUE,
strip.white=TRUE, header=TRUE)
cereals
data <- read.csv('interesting2.csv', as.is=TRUE, fill=TRUE,
strip.white=TRUE, header=TRUE)
data[1:10,]
# Create a scatterplot matrix of all variables.
scatmat <- ggpairs(data,
title="Casement plot of variables from cereals dataset")
scatmat
library(GGally)
# Create a scatterplot matrix of all variables.
scatmat <- ggpairs(data,
title="Casement plot of variables from cereals dataset")
scatmat
# Multiple Linear Regression
fit <- lm(y ~ x1 + x2 + x3 + x4 + x5 + x6, data=data)
summary(fit) # show results
est <- coefficients(fit) # model coefficients
res <- residuals(fit) # residuals
est
res
# Extract the residuals and predicted values
est <- fitted(fit) # predicted values
res <- residuals(fit) # residuals
# Extract the residuals and predicted values
pred.values <- fitted(fit) # predicted values
res <- residuals(fit) # residuals
# Extract the residuals and predicted values
pred.values <- fitted(fit) # predicted values
res <- residuals(fit) # residuals
plot.data <- c(pred.values,res)
plot.data
plot.data [1:10,]
plot.data [,1:10]
plot.data <- data.frame(pred.values,res)
plot.data [,1:10]
plot.data [1:10,]
# Extract the residuals and predicted values
pred <- fitted(fit) # predicted values
res <- residuals(fit) # residuals
plot.data <- data.frame(pred.values,res)
plot.data [1:10,]
# Plot the residual against the predicted value
plot <- ggplot(data=plot.data, aes(x=pred, y=res))+
ggtitle("Residual plot")+
xlab("Passenger Class")+ylab("Prob survival and 95% confidence interval")+
geom_point()+
geom_errorbar(aes(ymin=asymp.LCL, ymax=asymp.UCL),width=0.2)+
plot
# Extract the residuals and predicted values
pred <- fitted(fit) # predicted values
res <- residuals(fit) # residuals
plot.data <- data.frame(pred.values,res)
plot.data [1:10,]
# Plot the residual against the predicted value
plot <- ggplot(data=plot.data, aes(x=pred, y=res))+
ggtitle("Residual plot")+
xlab("Passenger Class")+ylab("Prob survival and 95% confidence interval")+
geom_point()+
scale_x_continuous(limits = c(-2,2))
plot
#*******************************************************
#
#  Kun, Yang   301178299
#  Stat 340, Spring 2015
#  Assignment 10, Part 3  - interesting
#
#  create interesting residual plots.
#
#  Change log:
#    2015-03-24 KY First Edition
#
#*******************************************************
# Assignment 10, Part 03 - interesting
# clear the workspace then set the current working directory.
rm(list=ls())
setwd("C:/Users/Kun/Desktop/340/R/Assignment 10/interesting")
cat("Current directory is", getwd(), "\n")
# load required libraries
library(ggplot2)
library(GGally)
# Read in the data
data <- read.csv('interesting2.csv', as.is=TRUE, fill=TRUE,
strip.white=TRUE, header=TRUE)
data[1:10,]
# Create a scatterplot matrix of all variables.
scatmat <- ggpairs(data, title="scatterplot matrix")
scatmat
# Multiple Linear Regression
fit <- lm(y ~ x1 + x2 + x3 + x4 + x5 + x6, data=data)
summary(fit)
# Extract the residuals and predicted values
pred <- fitted(fit) # predicted values
res <- residuals(fit) # residuals
plot.data <- data.frame(pred.values,res)
plot.data [1:10,]
# Plot the residual against the predicted value
plot <- ggplot(data=plot.data, aes(x=pred, y=res))+
ggtitle("Residual plot")+
xlab("Passenger Class")+ylab("Prob survival and 95% confidence interval")+
geom_point()+
scale_x_continuous(limits = c(-2,2))
plot
ggsave(plot, file="plot.png",h=4, w=6, units='in', dpi=300)
# Plot the residual against the predicted value
plot <- ggplot(data=plot.data, aes(x=pred, y=res))+
ggtitle("Residual plot")+
xlab("Passenger Class")+ylab("Prob survival and 95% confidence interval")+
geom_point()+
scale_x_continuous(limits = c(-2,2))
plot
ggsave(plot=plot, file="plot.png",h=4, w=6, units='in', dpi=300)
plot.data [1:10,]
# Extract the residuals and predicted values
pred <- fitted(fit) # predicted values
res <- residuals(fit) # residuals
plot.data <- data.frame(pred,res)
plot.data [1:10,]
# Plot the residual against the predicted value
plot <- ggplot(data=plot.data, aes(x=pred, y=res))+
ggtitle("Residual plot")+
xlab("Passenger Class")+ylab("Prob survival and 95% confidence interval")+
geom_point()+
scale_x_continuous(limits = c(-2,2))
plot
ggsave(plot=plot, file="plot.png",h=4, w=6, units='in', dpi=300)
# Plot the residual against the predicted value
plot <- ggplot(data=plot.data, aes(x=pred, y=res))+
ggtitle("Residual plot")+
xlab("predicted value")+ylab("residual")+
geom_point()+
scale_x_continuous(limits = c(-2,2))
plot
ggsave(plot=plot, file="plot.png",h=4, w=6, units='in', dpi=300)
